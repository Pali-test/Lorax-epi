// Import the AWS SDK and the 'assert' module for testing
const AWS = require('aws-sdk');  // AWS SDK to interact with SQS
const assert = require('assert'); // Assert module to perform validations

// Configure the AWS SDK to point to Localstack (emulated AWS services running locally)
// SQS endpoint will be redirected to Localstack's local URL
const sqs = new AWS.SQS({
  endpoint: 'http://localhost:4566',  // Localstack SQS endpoint
  region: 'us-east-1',  // Specify the region
});

// Queue name for testing
const QUEUE_NAME = 'test-queue';

// Function to create a new SQS queue
async function createQueue() {
  // Set up parameters for creating a new queue
  const params = {
    QueueName: QUEUE_NAME, // Name of the queue we want to create
  };

  try {
    // Call the SQS createQueue API to create the queue
    const data = await sqs.createQueue(params).promise();
    console.log('Queue created:', data.QueueUrl); // Log the URL of the created queue
    return data.QueueUrl; // Return the URL of the created queue for further use
  } catch (error) {
    // Handle any errors during queue creation
    console.error('Error creating queue:', error);
    throw error; // Throw the error to propagate it to the caller
  }
}

// Function to send a message to the specified SQS queue
async function sendMessage(queueUrl, messageBody) {
  // Set up parameters for sending a message
  const params = {
    QueueUrl: queueUrl,    // URL of the SQS queue to send the message to
    MessageBody: messageBody,  // The actual content of the message
  };

  try {
    // Call the SQS sendMessage API to send the message
    const data = await sqs.sendMessage(params).promise();
    console.log('Message sent:', data.MessageId); // Log the ID of the sent message
  } catch (error) {
    // Handle any errors during message sending
    console.error('Error sending message:', error);
    throw error; // Throw the error to propagate it to the caller
  }
}

// Function to receive a message from the specified SQS queue
async function receiveMessage(queueUrl) {
  // Set up parameters for receiving a message
  const params = {
    QueueUrl: queueUrl, // URL of the SQS queue to receive the message from
    MaxNumberOfMessages: 1,  // Maximum number of messages to retrieve (1 in this case)
    WaitTimeSeconds: 5, // Long polling for 5 seconds to wait for a message
  };

  try {
    // Call the SQS receiveMessage API to receive the message
    const data = await sqs.receiveMessage(params).promise();
    // Check if a message was received
    console.log('Received message:', data.Messages ? data.Messages[0].Body : 'No messages');
    return data.Messages ? data.Messages[0] : null; // Return the received message or null if no message
  } catch (error) {
    // Handle any errors during message reception
    console.error('Error receiving message:', error);
    throw error; // Throw the error to propagate it to the caller
  }
}

// Function to delete the received message from the queue
async function deleteMessage(queueUrl, receiptHandle) {
  // Set up parameters for deleting a message
  const params = {
    QueueUrl: queueUrl,  // URL of the SQS queue
    ReceiptHandle: receiptHandle, // Receipt handle of the message to delete
  };

  try {
    // Call the SQS deleteMessage API to delete the message
    await sqs.deleteMessage(params).promise();
    console.log('Message deleted'); // Log the success of the deletion
  } catch (error) {
    // Handle any errors during message deletion
    console.error('Error deleting message:', error);
    throw error; // Throw the error to propagate it to the caller
  }
}

// Main function to run the test
async function runTest() {
  try {
    // Step 1: Create a queue and get its URL
    const queueUrl = await createQueue();

    // Step 2: Send a message to the queue
    const messageBody = 'This is a test message!';  // Define the message to send
    await sendMessage(queueUrl, messageBody); // Send the message to the queue

    // Step 3: Receive a message from the queue
    const receivedMessage = await receiveMessage(queueUrl); // Get the received message

    // Step 4: Assert that the received message matches the sent message
    // This will throw an error if the messages don't match
    assert.strictEqual(receivedMessage.Body, messageBody, 'The received message does not match the sent message!');
    console.log('Test passed!'); // If assertion passes, log success

    // Step 5: Delete the received message from the queue
    await deleteMessage(queueUrl, receivedMessage.ReceiptHandle); // Delete the message

  } catch (error) {
    // Catch any errors that occur during the test and log them
    console.error('Test failed:', error);
  }
}

// Run the test
runTest();
